// player O plays top to bottom
	// player X plays left to right

	// a rhombus board

	//". X X . .",
	//" X . X . X",
	//"  . X . X .",
	//"   . X X . .",
	//"    O O O O O"


	// similar coordinates to chess, a3, b4 etc.
	// every square is connected to 6 other squares (if not an edge piece)
	// for example b2 is connected to
	// b1, b3, c1, c2, a2, c4
	// so for a given [x][i] it is connected to
	//	  		[x][i-1]	[x+1][i-1]
	//	[x-1][i]		[x][i]   	[x+1][i]
	//			[x-1][i+1]	[x][i+1]	[x+1][i+1]

	//". X X . .",
	//"X . X . X",
	//". X . X .",
	//". X X . .",
	//"O O O O O"


	// 'X' = 88
	// 'O' = 79
	// '.' = 46

	// convert board into a a graph paths are only there if same token on squares

	// use some maybe bfs or dfs on it's own
	// is any node on the right in any node on the lefts routing table

	// make routing table

	// first, make graph.
	// how the fuck do you make a graph again?


	// ok so we need a node struct,

	//struct Node
	//{
	//	char id;
	//	int checked;            // for traversing
	//struct Edge* headP;
	//struct Node* leftP;
	//struct Node* rightP;
	//struct Node* q_nextP;
	//	int edge_count;
	//};

	//struct Edge
	//{
	//struct Node* origin;
	//struct Node* destination;
	//struct Edge* nextP;
	//};


		// for our purposes, id will be the coordinates, such as b4 etc.
	// checked will be the same
	// the edge, left and rigth are there to make the linked list of tables.
	// are linked lists possible in go? yes you can
	// edge count is important too

	// first step, given a board, make the nodes

	ok so want to make string board into Tile board.
	spaces are a hassle, have to remove them first.


    next problem is making an id for each tile
    we are given an i,j value for a given tile

    just use that dont need fancy b4 naming fuck that shit yup

    alright so i can make nodes, now time to try make a graph.


    